let xp = 0;
let health = 100;
let gold = 50;
let currentWeapon = 0;
let fighting;
let monsterHealth;
let inventory = ["–±–∞—Å—Ç—É–Ω"];

const button1 = document.querySelector('#button1');
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const button4 = document.querySelector("#button4");
const button5 = document.querySelector("#button5");
const button6 = document.querySelector("#button6");
const button7 = document.querySelector("#button7");
const button8 = document.querySelector("#button8");
const button9 = document.querySelector("#button9");
const button10 = document.querySelector("#button10");
const additionalButtons = document.querySelectorAll(".additional-button");
const text = document.querySelector("#text");
const xpText = document.querySelector("#xpText");
const healthText = document.querySelector("#healthText");
const goldText = document.querySelector("#goldText");
const monsterStats = document.querySelector("#monsterStats");
const monsterName = document.querySelector("#monsterName");
const monsterHealthText = document.querySelector("#monsterHealth");

const weapons = [
  { name: '–±–∞—Å—Ç—É–Ω', power: 5 },
  { name: '—Å–∞—Ç—ä—Ä', power: 30 },
  { name: '–±–æ–∑–¥—É–≥–∞–Ω', power: 50 },
  { name: '–º–µ—á', power: 100 }
];

const monsters = [
  {
    name: "—Ç–∞–ª–∞—Å—ä–º",
    level: 2,
    health: 15
  },
  {
    name: "–∫–∞—Ä–∞–∫–æ–Ω–¥–∂—É–ª",
    level: 8,
    health: 60
  },
  {
    name: "–¥—Ä–∞–∫–æ–Ω",
    level: 20,
    health: 300
  }
];

const locations = [
  {
    name: "town square",
    "button text": ["–ö—ä–º –º–∞–≥–∞–∑–∏–Ω–∞", "–ö—ä–º –ø–µ—â–µ—Ä–∞—Ç–∞", "–ë–∏–π —Å–µ —Å –¥—Ä–∞–∫–æ–Ω–∞"],
    "button functions": [goStore, goCave, fightDragon],
    text: "–¢–∏ —Å–∏ –≤ —Ü–µ–Ω—Ç—ä—Ä–∞ –Ω–∞ –≥—Ä–∞–¥–∞. –í–∏–∂–¥–∞—à –∑–Ω–∞–∫ –Ω–∞ –∫–æ–π—Ç–æ –ø–∏—à–µ \"–ú–∞–≥–∞–∑–∏–Ω\" –∏ —Ç–∞–±–µ–ª–∞ \"–ö—ä–º –ø–µ—â–µ—Ä–∞—Ç–∞\"."
  },
  {
    name: "store",
    "button text": ["–ö—É–ø–∏ –∑–¥—Ä–∞–≤–µ (–∑–∞ 10–∂.)", "–ö—É–ø–∏ –æ—Ä—ä–∂–∏–µ (–∑–∞ 30–∂.)", "–ö—ä–º —Ü–µ–Ω—Ç—ä—Ä–∞"],
    "button functions": [buyHealth, buyWeapon, goTown],
    text: "–¢–∏ –≤–ª–µ–∑–µ –≤ –º–∞–≥–∞–∑–∏–Ω–∞."
  },
  {
    name: "cave",
    "button text": ["–ë–∏–π —Å–µ —Å —Ç–∞–ª–∞—Å—ä–º", "–ë–∏–π —Å–µ —Å –∫–∞—Ä–∞–∫–æ–Ω–¥–∂—É–ª", "–ö—ä–º —Ü–µ–Ω—Ç—ä—Ä–∞ –Ω–∞ –≥—Ä–∞–¥–∞"],
    "button functions": [fightSlime, fightBeast, goTown],
    text: "–¢–∏ –≤–ª–µ–∑–µ –≤ –ø–µ—â–µ—Ä–∞—Ç–∞. –í–∏–∂–¥–∞—à –Ω—è–∫–∞–∫–≤–∏ –¥–∑–≤–µ—Ä–æ–≤–µ."
  },
  {
    name: "fight",
    "button text": ["–ê—Ç–∞–∫—É–≤–∞–π", "–ü–∞–π —Å–µ", "–ë–µ–≥–∞–∞–∞–∞–π"],
    "button functions": [attack, dodge, goTown],
    text: "–¢–∏ —Å–µ –±–∏–µ—à —Å –¥–∑–≤–µ—Ä–æ–≤–µ—Ç–µ."
  },
  {
    name: "kill monster",
    "button text": ["–ö—ä–º —Ü–µ–Ω—Ç—ä—Ä–∞", "–û–¥–∏ —É —Ü–µ–Ω—Ç—ä—Ä–∞", "–ê–±–µ –æ–¥–∏ —É —Ü–µ–Ω—Ç—ä—Ä–∞, –±–µ"],
    "button functions": [easterEgg, easterEgg, easterEgg],
    text: '–î–∑–≤–µ—Ä–∞ –≤–∏–∫–∞ "–ú–∞–π–∫–æ—É!" –∏ —Å–µ –≥—ä—Ç–≤–∞. –¢–∏ –ø–µ—á–µ–ª–∏—à –æ–ø–∏—Ç –∏ –∂—ä–ª—Ç–∏—Ü–∏.'
  },
  {
    name: "lose",
    "button text": ["–û–ø–∏—Ç–∞–π –ø–∞–∫?", "–ü—Ä–æ–±–≤–∞–π –ø–∞–∫?", "–ï–ª–∞ –º–∏ –ø–∞–∫, –±–µ?"],
    "button functions": [restart, restart, restart],
    text: "‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è –ë–∞—Ö —Ç–µ —É –∂–∏–≤–æ—Ç–∞ –∏ —Ç–∏ —Å–≤—ä—Ä—à–∏!!! ‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è"
  },
  {
    name: "win",
    "button text": ["–û–ø–∏—Ç–∞–π –ø–∞–∫?", "–ü—Ä–æ–±–≤–∞–π –ø–∞–∫?", "–ï–ª–∞ –º–∏ –ø–∞–∫, –±–µ?"],
    "button functions": [restart, restart, restart],
    text: "üéâ –¢–∏ –ø–æ–±–µ–¥–∏ –¥—Ä–∞–∫–æ–Ω–∞! –ï–≤–∞–ª–∞, –º–∞—à–∏–Ω–∞! üéâ"
  },
  {
    name: "easter egg",
    "button text": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "–ö—ä–º —Ü–µ–Ω—Ç—ä—Ä–∞?"],
    "button functions": [pickOne, pickTwo, pickThree, pickFour, pickFive, pickSix, pickSeven, pickEight, pickNine, goTown],
    text: "–¢–∏ –æ—Ç–∫—Ä–∏ —Ç–∞–π–Ω–∞ –∏–≥—Ä–∞. –ò–∑–±–µ—Ä–∏ —Å–∏ —á–∏—Å–ª–æ. –ü–µ—Ç —á–∏—Å–ª–∞ –º–µ–∂–¥—É 1 –∏ 9 —â–µ –±—ä–¥–∞—Ç –∏–∑–±—Ä–∞–Ω–∏ —Å–ª—É—á–∞–π–Ω–æ. –ê–∫–æ —á–∏—Å–ª–æ—Ç–æ, –∫–æ–µ—Ç–æ —Å–∏ –∏–∑–±—Ä–∞–ª —Å—ä–≤–ø–∞–¥–∞ —Å –µ–¥–Ω–æ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ, –ø–µ—á–µ–ª–∏—à 20 –∂—ä–ª—Ç–∏—Ü–∏. –ù–æ –∞–∫–æ –∏–∑–±—Ä–∞–Ω–æ—Ç–æ –æ—Ç —Ç–µ–± —á–∏—Å–ª–æ –Ω–µ –µ —Å—Ä–µ–¥ —Å–ª—É—á–∞–π–Ω–æ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ, –≥—É–±–∏—à 10 –µ–¥–∏–Ω–∏—Ü–∏ –æ—Ç –∂–∏–≤–æ—Ç–∞ —Å–∏!"
  }
];

// initialize buttons
button1.onclick = goStore;
button2.onclick = goCave;
button3.onclick = fightDragon;
button4.onclick = pickFour;
button5.onclick = pickFive;
button6.onclick = pickSix;
button7.onclick = pickSeven;
button8.onclick = pickEight;
button9.onclick = pickNine;
button10.onclick = goTown;

function update(location) {
  monsterStats.style.display = "none";
  button1.innerText = location["button text"][0];
  button2.innerText = location["button text"][1];
  button3.innerText = location["button text"][2];
  button1.onclick = location["button functions"][0];
  button2.onclick = location["button functions"][1];
  button3.onclick = location["button functions"][2];
  text.innerText = location.text;
}

function goTown() {
  update(locations[0]);
  additionalButtons.forEach(button => {
    button.style.display = "none";
  });
}

function goStore() {
  update(locations[1]);
  text.innerText += " –í —Ç–≤–æ—è—Ç–∞ –æ—Ä—ä–∂–µ–π–Ω–∞ –∏–º–∞: " + inventory + ".";
  if (health < 50) {
    text.innerText += " –ê–º–∞ –Ω–µ—â–æ –±–æ–ª–Ω–∞–≤ –º–∏ –∏–∑–≥–ª–µ–∂–¥–∞—à, –≤—É–π—á–µ!";
  } else {
    text.innerText += " –ò —Å–∏ –∑–¥—Ä–∞–≤ –∫–∞—Ç–æ –±–∏–∫ –∏ –ø–æ—á—Ç–∏ —Ç–æ–ª–∫–æ–≤–∞ —É–º–µ–Ω!";
  }
}

function goCave() {
  update(locations[2]);
}

function buyHealth() {
  if (gold >= 10) {
    gold -= 10;
    health += 10;
    goldText.innerText = gold;
    healthText.innerText = health;
    if (health < 50) {
      text.innerText = "–°–∏–ø–∏, –∞–∫–æ –Ω–µ–º–∞, –¥–æ–Ω–µ—Å–∏.";
    } else {
      text.innerText = "–ï–≤–∞–ª–∞—Ç–∞ –∑–¥—Ä–∞–≤–µ–Ω—è–∫!";
    }
  } else {
    text.innerText = "–ï –Ω–µ–º–∞—à –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∂—ä–ª—Ç–∏—Ü–∏, –∑–∞ –¥–∞ —Å–∏ –∫—É–ø–∏—à –∑–¥—Ä–∞–≤–µ, –±–∞—Ü–µ! –ê–º–∞ —Å–ø–æ–∫–æ, —Ç–æ –∏ –±–µ–∑ —Ç–æ–≤–∞ –∑–¥—Ä–∞–≤–µ —Å –ø–∞—Ä–∏ –Ω–µ —Å–µ –∫—É–ø—É–≤–∞.";
  }
}

function buyWeapon() {
  if (currentWeapon < weapons.length - 1) {
    if (gold >= 30) {
      gold -= 30;
      currentWeapon++;
      goldText.innerText = gold;
      let newWeapon = weapons[currentWeapon].name;
      text.innerText = "–í–µ—á–µ –∏–º–∞—à " + newWeapon + ".";
      inventory.push(newWeapon);
      text.innerText += " –í —Ç–≤–æ—è—Ç–∞ –æ—Ä—ä–∂–µ–π–Ω–∞ –∏–º–∞: " + inventory.join(", ") + ".";
    } else {
      text.innerText = "–ï–ø–∞ –Ω–µ–º–∞—à –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –∂—ä–ª—Ç–∏—Ü–∏, –∑–∞ –¥–∞ —Å–∏ –∫—É–ø–∏—à –æ—Ä—ä–∂–∏–µ, –±–µ –ø—Ä–æ—à–ª—è–∫!";
    }
  } else {
    text.innerText = "–¢–∏ –≤–µ—á–µ –ø—Ä–∏—Ç–µ–∂–∞–≤–∞—à –Ω–∞–π-–º–æ–≥—ä—â–æ—Ç–æ –æ—Ä—ä–∂–∏–µ!";
    button2.innerText = "–ü—Ä–æ–¥–∞–π –æ—Ä—ä–∂–∏–µ –∑–∞ 15–∂.";
    button2.onclick = sellWeapon;
  }
}

function sellWeapon() {
  if (inventory.length > 1) {
    gold += 15;
    goldText.innerText = gold;
    let currentWeapon = inventory.shift();
    text.innerText = "–¢–∏ –ø—Ä–æ–¥–∞–¥–µ " + currentWeapon + ".";
    text.innerText += " –í —Ç–≤–æ—è—Ç–∞ –æ—Ä—ä–∂–µ–π–Ω–∞ –∏–º–∞—à: " + inventory;
  } else {
    text.innerText = "–ù–µ –ø—Ä–æ–¥–∞–≤–∞–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–æ—Ç–æ —Å–∏ –æ—Ä—ä–∂–∏–µ, –±–µ –±—É–Ω–∞–∫!";
  }
}

function fightSlime() {
  fighting = 0;
  goFight();
}

function fightBeast() {
  fighting = 1;
  goFight();
}

function fightDragon() {
  fighting = 2;
  goFight();
}

function goFight() {
  update(locations[3]);
  monsterHealth = monsters[fighting].health;
  monsterStats.style.display = "block";
  monsterName.innerText = monsters[fighting].name;
  monsterHealthText.innerText = monsterHealth;
}

function attack() {
  text.innerText = "–û–Ω—è –¥–∑–≤–µ—Ä " + monsters[fighting].name + "–∞ –∞—Ç–∞–∫—É–≤–∞.";
  text.innerText += " –¢–∏ –≥–æ –∞—Ç–∞–∫—É–≤–∞—à —Å —Ç–≤–æ—è—Ç " + weapons[currentWeapon].name + ".";
  health -= getMonsterAttackValue(monsters[fighting].level);
  if (isMonsterHit()) {
    monsterHealth -= weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1;
  } else {
    text.innerText += " –¢–∏ –ø—Ä–æ–ø—É—Å–∫–∞—à.";
  }
  monsterHealthText.innerText = monsterHealth;
  healthText.innerText = health;
  if (health <= 0) {
    healthText.innerText = "0";
    lose();
  } else if (monsterHealth <= 0) {
    fighting === 2 ? winGame() : defeatMonster();
  }
  if (Math.random() <= .1 && inventory.length !== 1) {
    text.innerText += " –¢–≤–æ—è—Ç " + inventory.pop() + " —Å–µ —Å—á—É–ø–∏.";
    currentWeapon--;
  }
}

function getMonsterAttackValue(level) {
  const hit = (level * 5) - (Math.floor(Math.random() * xp));
  console.log(hit);
  return hit > 0 ? hit : 0;
}

function isMonsterHit() {
  return Math.random() > .2 || health < 20;
}

function dodge() {
  text.innerText = "–¢–∏ —Å–µ –æ—Ç–±—Ä–∞–Ω—è–≤–∞—à –æ—Ç –∞—Ç–∞–∫–∞—Ç–∞ –Ω–∞ " + monsters[fighting].name + "–∞.";
}

function defeatMonster() {
  gold += Math.floor(monsters[fighting].level * 6.7);
  xp += monsters[fighting].level;
  goldText.innerText = gold;
  xpText.innerText = xp;
  update(locations[4]);
}

function lose() {
  update(locations[5]);
}

function winGame() {
  update(locations[6]);
}

function restart() {
  xp = 0;
  health = 100;
  gold = 50;
  currentWeapon = 0;
  inventory = ["–±–∞—Å—Ç—É–Ω"];
  goldText.innerText = gold;
  healthText.innerText = health;
  xpText.innerText = xp;
  goTown();
}

function easterEgg() {
  if (Math.floor(Math.random() * 2) % 2 === 0) {
    update(locations[7]);
    additionalButtons.forEach(button => {
      button.style.display = "inline-block";
    });
  } else {
    goTown();
  }
}

function pickOne() {
  pick(1);
}

function pickTwo() {
  pick(2);
}

function pickThree() {
  pick(3);
}

function pickFour() {
  pick(4);
}

function pickFive() {
  pick(5);
}

function pickSix() {
  pick(6);
}
function pickSeven() {
  pick(7);
}

function pickEight() {
  pick(8);
}

function pickNine() {
  pick(9);
}

function pick(guess) {
  const numbers = [];
  while (numbers.length < 5) {
    numbers.push(Math.ceil(Math.random() * 9));
  }
  text.innerText = "–¢–∏ –∏–∑–±—Ä–∞ " + guess + ". –¢–æ–≤–∞ —Å–∞ —Å–ª—É—á–∞–π–Ω–æ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ —á–∏—Å–ª–∞:\n";
  for (let i = 0; i < 5; i++) {
    text.innerText += numbers[i] + "\n";
  }
  if (numbers.indexOf(guess) !== -1) {
    text.innerText += "–ë—Ä–∞–≤–æ! –¢–∏ —Å–ø–µ—á–µ–ª–∏ 20 –∂—ä–ª—Ç–∏—Ü–∏!";
    gold += 20;
    goldText.innerText = gold;
  } else {
    text.innerText += "–Ø–∑—ä–∫! –¢–∏ –∏–∑–≥—É–±–∏ 10 –µ–¥–∏–Ω–∏—Ü–∏ –æ—Ç –∑–¥—Ä–∞–≤–µ—Ç–æ —Å–∏!";
    health -= 10;
    if (health <= 0) {
      healthText.innerText = "0";
      additionalButtons.forEach(b => b.style.display = "none");
      lose();
    } else {
      healthText.innerText = health;
    }
  }
}